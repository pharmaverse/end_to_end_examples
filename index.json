[
{
	"uri": "/data/",
	"title": "Data",
	"tags": [],
	"description": "STDM, ADaM and other data products",
	"content": "Section 1 Data Engineering examples This section contains examples generating STDM, ADaM and other data derivatives.\n"
},
{
	"uri": "/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/data/adsl/",
	"title": "Create ADSL",
	"tags": [],
	"description": "An example of how to generate an ADSL dataset from STDM",
	"content": " The first step is to load our pharamverse libraries and data. Here we are trying to create an ADSL dataset using the pilot CDISC data.\noptions(repos = c( pharmaverse = \u0026#39;https://pharmaverse.r-universe.dev\u0026#39;, CRAN = \u0026#39;https://cloud.r-project.org\u0026#39;)) library(metacore) library(metatools) library(admiral) library(xportr) library(dplyr) ## ## Attaching package: \u0026#39;dplyr\u0026#39; ## The following object is masked from \u0026#39;package:admiral\u0026#39;: ## ## filter_if ## The following objects are masked from \u0026#39;package:stats\u0026#39;: ## ## filter, lag ## The following objects are masked from \u0026#39;package:base\u0026#39;: ## ## intersect, setdiff, setequal, union library(tidyr) library(safetyData) library(lubridate) ## ## Attaching package: \u0026#39;lubridate\u0026#39; ## The following objects are masked from \u0026#39;package:base\u0026#39;: ## ## date, intersect, setdiff, union library(stringr) # Read in data data(\u0026quot;sdtm_dm\u0026quot;) data(\u0026quot;sdtm_ds\u0026quot;) data(\u0026quot;sdtm_ex\u0026quot;) data(\u0026quot;sdtm_vs\u0026quot;) data(\u0026quot;sdtm_lb\u0026quot;) data(\u0026quot;sdtm_sv\u0026quot;) data(\u0026quot;sdtm_sc\u0026quot;) data(\u0026quot;sdtm_mh\u0026quot;) data(\u0026quot;sdtm_qs\u0026quot;) # Read in metacore object load(metacore_example(\u0026quot;pilot_ADaM.rda\u0026quot;)) metacore \u0026lt;- metacore %\u0026gt;% select_dataset(\u0026quot;ADSL\u0026quot;) Start Building The first thing we are going to do is pull through all the columns that come directly from the SDTM datasets. You might know which datasets you are going to pull from directly already, but if you don’t you can call build_from_derived with just an empty list and the error will tell you which datasets you need to supply.\nbuild_from_derived(metacore, list(), predecessor_only = FALSE) ## Error in build_from_derived(metacore, list(), predecessor_only = FALSE): Not all datasets provided. Please pass the following dataset(s): ## DM In this case all the columns come from DM so that is the only dataset I will pass into build_from_derived. The result is all the columns are combined to make a new dataset and any columns that need renaming between SDTM and ADAM are renamed.\nadsl_preds \u0026lt;- build_from_derived(metacore, list(\u0026quot;dm\u0026quot; = sdtm_dm), predecessor_only = FALSE, keep = TRUE) head(adsl_preds) ## STUDYID USUBJID SUBJID SITEID ARM AGE AGEU RACE ## 1 CDISCPILOT01 01-701-1015 1015 701 Placebo 63 YEARS WHITE ## 2 CDISCPILOT01 01-701-1023 1023 701 Placebo 64 YEARS WHITE ## 3 CDISCPILOT01 01-701-1028 1028 701 Xanomeline High Dose 71 YEARS WHITE ## 4 CDISCPILOT01 01-701-1033 1033 701 Xanomeline Low Dose 74 YEARS WHITE ## 5 CDISCPILOT01 01-701-1034 1034 701 Xanomeline High Dose 77 YEARS WHITE ## 6 CDISCPILOT01 01-701-1047 1047 701 Placebo 85 YEARS WHITE ## SEX ETHNIC DTHFL RFSTDTC RFENDTC TRT01P ## 1 F HISPANIC OR LATINO \u0026lt;NA\u0026gt; 2014-01-02 2014-07-02 Placebo ## 2 M HISPANIC OR LATINO \u0026lt;NA\u0026gt; 2012-08-05 2012-09-02 Placebo ## 3 M NOT HISPANIC OR LATINO \u0026lt;NA\u0026gt; 2013-07-19 2014-01-14 Xanomeline High Dose ## 4 M NOT HISPANIC OR LATINO \u0026lt;NA\u0026gt; 2014-03-18 2014-04-14 Xanomeline Low Dose ## 5 F NOT HISPANIC OR LATINO \u0026lt;NA\u0026gt; 2014-07-01 2014-12-30 Xanomeline High Dose ## 6 F NOT HISPANIC OR LATINO \u0026lt;NA\u0026gt; 2013-02-12 2013-03-29 Placebo Now we have the base dataset, we can start to create the variable decodes and groups using thr control terminology.\nadsl_ct \u0026lt;- adsl_preds %\u0026gt;% create_cat_var(metacore, AGE, AGEGR1, AGEGR1N) %\u0026gt;% create_var_from_codelist(metacore, RACE, RACEN) %\u0026gt;% create_var_from_codelist(metacore, TRT01P, TRT01PN) %\u0026gt;% mutate( SITEID = as.character(SITEID), SITEGR1 = SITEID, TRT01A = TRT01P, TRT01AN = TRT01PN, ITTFL = if_else(!is.na(ARM) \u0026amp; ARM != \u0026quot;Screen Failure\u0026quot;, \u0026quot;Y\u0026quot;, \u0026quot;N\u0026quot;)) adsl_dates \u0026lt;- adsl_ct %\u0026gt;% derive_var_trtsdtm(dataset_ex = sdtm_ex) %\u0026gt;% # Derive Datetime of First Exposure to Treatment derive_var_trtedtm(dataset_ex = sdtm_ex) %\u0026gt;% # Derive Datetime of Last Exposure to Treatment derive_vars_dtm_to_dt(source_vars = vars(TRTSDTM, TRTEDTM)) %\u0026gt;% #Convert Datetime variables to date mutate(TRTDURD = as.numeric(TRTEDT - TRTSDT) + 1, CUMDOSE = TRT01PN * TRTDURD, AVGDD = CUMDOSE/TRTDURD, SAFFL = if_else(ITTFL == \u0026quot;Y\u0026quot; \u0026amp; !is.na(TRTSDT), \u0026quot;Y\u0026quot;, \u0026quot;N\u0026quot;)) %\u0026gt;% drop_unspec_vars(metacore) adsl_dispo \u0026lt;- adsl_dates %\u0026gt;% # Derive a Disposition Status derive_disposition_status( dataset_ds = sdtm_ds, new_var = EOSSTT, status_var = DSDECOD, filter = DSCAT == \u0026quot;DISPOSITION EVENT\u0026quot; ) %\u0026gt;% # Derive a Disposition Reason derive_disposition_reason( dataset_ds = sdtm_ds, new_var = DCSREAS, reason_var = DSDECOD, filter = DSCAT == \u0026quot;DISPOSITION EVENT\u0026quot; \u0026amp; DSDECOD != \u0026quot;SCREEN FAILURE\u0026quot; ) %\u0026gt;% # Derived Disposition Date derive_disposition_dt( dataset_ds = sdtm_ds, new_var = RFENDT, dtc = DSSTDTC, filter_ds = DSCAT == \u0026quot;OTHER EVENT\u0026quot; \u0026amp; DSDECOD == \u0026quot;FINAL RETRIEVAL VISIT\u0026quot; ) %\u0026gt;% # Getting the standardize dispositions from codelist create_var_from_codelist(metacore, EOSSTT, DCDECOD) %\u0026gt;% # Creating disposition flags mutate( DISCONFL = if_else(DCDECOD != \u0026quot;COMPLETED\u0026quot;, \u0026quot;Y\u0026quot;, NA_character_), DSRAEFL = if_else(DCDECOD != \u0026quot;ADVERSE EVENT\u0026quot;, \u0026quot;Y\u0026quot;, NA_character_)) ## Warning: `derive_disposition_dt()` was deprecated in admiral 0.6.0. ## Please use `derive_var_disposition_dt()` instead. ## This warning is displayed once every 8 hours. ## Call `lifecycle::last_lifecycle_warnings()` to see where this warning was generated. ## Warning: `derive_disposition_reason()` was deprecated in admiral 0.6.0. ## Please use `derive_vars_disposition_reason()` instead. ## This warning is displayed once every 8 hours. ## Call `lifecycle::last_lifecycle_warnings()` to see where this warning was generated. ## Warning: `derive_disposition_status()` was deprecated in admiral 0.6.0. ## Please use `derive_var_disposition_status()` instead. ## This warning is displayed once every 8 hours. ## Call `lifecycle::last_lifecycle_warnings()` to see where this warning was generated. # Get end of treatment visit adsl_dispo \u0026lt;- sdtm_ds %\u0026gt;% filter(DSTERM ==\u0026#39;PROTOCOL COMPLETED\u0026#39;) %\u0026gt;% mutate(VISNUMEN = if_else(VISITNUM == 13, 12, VISITNUM)) %\u0026gt;% select(USUBJID, VISNUMEN) %\u0026gt;% left_join(adsl_dispo, ., by = \u0026quot;USUBJID\u0026quot;) # Get heights at screening cause those are the only heights available heights \u0026lt;- sdtm_vs %\u0026gt;% filter(VISITNUM == 1, VSTESTCD == \u0026#39;HEIGHT\u0026#39;) %\u0026gt;% select(USUBJID, VSTEST, VSSTRESN) bmis \u0026lt;- sdtm_vs %\u0026gt;% # Get baseline weight filter( VISITNUM == 3, VSTESTCD == \u0026quot;WEIGHT\u0026quot;) %\u0026gt;% select(USUBJID, VSTEST, VSSTRESN) %\u0026gt;% # Combine with height bind_rows(heights) %\u0026gt;% # Pivot to a row per subject and calculate BMIBL pivot_wider(names_from = VSTEST, values_from = VSSTRESN) %\u0026gt;% mutate(BMIBL = compute_bmi(Height, Weight)) %\u0026gt;% rename(WEIGHTBL = Weight, HEIGHTBL = Height) %\u0026gt;% # Create the BMI grouping using the control terminology create_cat_var(metacore, BMIBL, BMIBLGR1) bmis  ## # A tibble: 254 × 5 ## USUBJID WEIGHTBL HEIGHTBL BMIBL BMIBLGR1 ## \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;chr\u0026gt; ## 1 01-701-1015 54.4 147. 25.1 25-\u0026lt;30 ## 2 01-701-1023 80.3 163. 30.4 \u0026gt;=30 ## 3 01-701-1028 99.3 178. 31.4 \u0026gt;=30 ## 4 01-701-1033 88.4 175. 28.8 25-\u0026lt;30 ## 5 01-701-1034 62.6 155. 26.1 25-\u0026lt;30 ## 6 01-701-1047 67.1 149. 30.4 \u0026gt;=30 ## 7 01-701-1097 78.0 169. 27.3 25-\u0026lt;30 ## 8 01-701-1111 59.9 158. 23.9 \u0026lt;25 ## 9 01-701-1115 78.9 182. 23.9 \u0026lt;25 ## 10 01-701-1118 71.2 180. 21.9 \u0026lt;25 ## # … with 244 more rows adsl_bmi \u0026lt;- left_join(adsl_dispo, bmis, by = \u0026quot;USUBJID\u0026quot;)  Apply Codelists completer_cal \u0026lt;- function(.data, wk_num, sv){ new_col \u0026lt;- paste0(\u0026quot;COMP\u0026quot;, wk_num, \u0026quot;FL\u0026quot;) %\u0026gt;% sym() sv %\u0026gt;% group_by(USUBJID) %\u0026gt;% filter(VISIT == paste(\u0026quot;WEEK\u0026quot;, wk_num)) %\u0026gt;% select(USUBJID, SVSTDTC) %\u0026gt;% left_join(.data, . , by = \u0026quot;USUBJID\u0026quot;) %\u0026gt;% mutate({{new_col }}:= if_else(!is.na(SVSTDTC) \u0026amp;\u0026amp; TRTEDT \u0026gt;= SVSTDTC, \u0026quot;Y\u0026quot;, \u0026quot;N\u0026quot;)) %\u0026gt;% select(-SVSTDTC) } first_visit \u0026lt;- sdtm_sv %\u0026gt;% filter(VISITNUM == 1) %\u0026gt;% mutate(VISIT1DT = as_date(SVSTDTC)) %\u0026gt;% select(USUBJID, VISIT1DT) adsl_fls \u0026lt;- adsl_bmi %\u0026gt;% completer_cal(8, sdtm_sv) %\u0026gt;% completer_cal(16, sdtm_sv) %\u0026gt;% completer_cal(24, sdtm_sv) %\u0026gt;% left_join(first_visit, by= \u0026quot;USUBJID\u0026quot;) adsl_ed \u0026lt;- sdtm_sc %\u0026gt;% filter(SCTESTCD == \u0026quot;EDLEVEL\u0026quot;) %\u0026gt;% select(USUBJID, SCSTRESN) %\u0026gt;% rename(EDUCLVL = SCSTRESN) %\u0026gt;% left_join(adsl_fls, ., by = \u0026quot;USUBJID\u0026quot;) adsl_alz \u0026lt;- sdtm_qs %\u0026gt;% group_by(USUBJID) %\u0026gt;% filter(QSCAT == \u0026quot;ALZHEIMER\u0026#39;S DISEASE ASSESSMENT SCALE\u0026quot;) %\u0026gt;% summarise(MMSETOT = sum(as.numeric(QSORRES), na.rm = TRUE)) %\u0026gt;% left_join(adsl_ed, ., by = \u0026quot;USUBJID\u0026quot;) adsl_mh \u0026lt;- sdtm_mh %\u0026gt;% filter(MHCAT == \u0026quot;PRIMARY DIAGNOSIS\u0026quot;) %\u0026gt;% mutate(DISONSDT = as_date(MHSTDTC)) %\u0026gt;% select(USUBJID, DISONSDT) %\u0026gt;% left_join(adsl_alz, ., by = \u0026quot;USUBJID\u0026quot;) %\u0026gt;% mutate(DURDIS = interval(DISONSDT, VISIT1DT) %/% months(1)) %\u0026gt;% create_cat_var(metacore, DURDIS, DURDSGR1) adsl_raw \u0026lt;- sdtm_qs %\u0026gt;% filter(VISITNUM \u0026gt; 3) %\u0026gt;% group_by(USUBJID) %\u0026gt;% summarise(efffl = any(QSTEST == \u0026quot;ADAS-COG(11) Subscore\u0026quot;) \u0026amp; any(QSTESTCD == \u0026quot;CIBIC\u0026quot;)) %\u0026gt;% left_join(adsl_mh, by = \u0026quot;USUBJID\u0026quot;) %\u0026gt;% mutate(EFFFL = if_else(efffl \u0026amp; SAFFL == \u0026quot;Y\u0026quot;, \u0026quot;Y\u0026quot;, \u0026quot;N\u0026quot;)) %\u0026gt;% drop_unspec_vars(metacore) #This will drop any columns that aren\u0026#39;t specificed in the metacore object Now we have all the variables defined we can run some checks before applying the necessary formatting.\ntest \u0026lt;- metacore$var_spec %\u0026gt;% select(variable, type) %\u0026gt;% mutate(dataset = \u0026quot;ADSL\u0026quot;) adsl_raw %\u0026gt;% check_variables(metacore) %\u0026gt;% # Check all variables specified are present and no more check_ct_data(metacore) %\u0026gt;% # Checks all variables with CT only contain values within the CT order_cols(metacore) %\u0026gt;% # Orders the columns according to the spec sort_by_key(metacore) %\u0026gt;% # Sorts the rows by the sort keys xportr_type(test) %\u0026gt;% # Coerce variable type to match spec xportr_length(metacore) %\u0026gt;% # Assigns SAS length from a variable level metadata xportr_label(metacore) %\u0026gt;% # Assigns variable label from metacore specifications xportr_df_label(metacore) # Assigns dataset label from metacore specifications ## No missing or extra variables ## # A tibble: 248 × 49 ## STUDYID USUBJID SUBJID SITEID SITEGR1 ARM TRT01P TRT01PN TRT01A TRT01AN ## \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; ## 1 CDISCPILOT… 01-701… 1015 701 701 Plac… Place… 0 Place… 0 ## 2 CDISCPILOT… 01-701… 1023 701 701 Plac… Place… 0 Place… 0 ## 3 CDISCPILOT… 01-701… 1028 701 701 Xano… Xanom… 81 Xanom… 81 ## 4 CDISCPILOT… 01-701… 1033 701 701 Xano… Xanom… 54 Xanom… 54 ## 5 CDISCPILOT… 01-701… 1034 701 701 Xano… Xanom… 81 Xanom… 81 ## 6 CDISCPILOT… 01-701… 1047 701 701 Plac… Place… 0 Place… 0 ## 7 CDISCPILOT… 01-701… 1097 701 701 Xano… Xanom… 54 Xanom… 54 ## 8 CDISCPILOT… 01-701… 1111 701 701 Xano… Xanom… 54 Xanom… 54 ## 9 CDISCPILOT… 01-701… 1115 701 701 Xano… Xanom… 54 Xanom… 54 ## 10 CDISCPILOT… 01-701… 1118 701 701 Plac… Place… 0 Place… 0 ## # … with 238 more rows, and 39 more variables: TRTSDT \u0026lt;dbl\u0026gt;, TRTEDT \u0026lt;dbl\u0026gt;, ## # TRTDURD \u0026lt;dbl\u0026gt;, AVGDD \u0026lt;dbl\u0026gt;, CUMDOSE \u0026lt;dbl\u0026gt;, AGE \u0026lt;dbl\u0026gt;, AGEGR1 \u0026lt;chr\u0026gt;, ## # AGEGR1N \u0026lt;dbl\u0026gt;, AGEU \u0026lt;chr\u0026gt;, RACE \u0026lt;chr\u0026gt;, RACEN \u0026lt;dbl\u0026gt;, SEX \u0026lt;chr\u0026gt;, ## # ETHNIC \u0026lt;chr\u0026gt;, SAFFL \u0026lt;chr\u0026gt;, ITTFL \u0026lt;chr\u0026gt;, EFFFL \u0026lt;chr\u0026gt;, COMP8FL \u0026lt;chr\u0026gt;, ## # COMP16FL \u0026lt;chr\u0026gt;, COMP24FL \u0026lt;chr\u0026gt;, DISCONFL \u0026lt;chr\u0026gt;, DSRAEFL \u0026lt;chr\u0026gt;, DTHFL \u0026lt;chr\u0026gt;, ## # BMIBL \u0026lt;dbl\u0026gt;, BMIBLGR1 \u0026lt;chr\u0026gt;, HEIGHTBL \u0026lt;dbl\u0026gt;, WEIGHTBL \u0026lt;dbl\u0026gt;, EDUCLVL \u0026lt;dbl\u0026gt;, ## # DISONSDT \u0026lt;dbl\u0026gt;, DURDIS \u0026lt;dbl\u0026gt;, DURDSGR1 \u0026lt;chr\u0026gt;, VISIT1DT \u0026lt;dbl\u0026gt;, …  "
},
{
	"uri": "/",
	"title": "Learn Theme for Hugo",
	"tags": [],
	"description": "",
	"content": "pharmaverse examples Here are some examples!!\nSome more copy.\n Data  STDM, ADaM and other data products\n  Create ADSL  An example of how to generate an ADSL dataset from STDM\n    "
},
{
	"uri": "/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]