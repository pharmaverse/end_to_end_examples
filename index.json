[
{
	"uri": "/data/",
	"title": "Data",
	"tags": [],
	"description": "STDM, ADaM and other data products",
	"content": "Section 1 Data Engineering examples This section contains examples generating STDM, ADaM and other data derivatives.\n"
},
{
	"uri": "/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/data/adsl/",
	"title": "Create ADSL",
	"tags": [],
	"description": "An example of how to generate an ADSL dataset from STDM",
	"content": " The first step is to load our pharamverse libraries and data. Here we are trying to create an ADSL dataset using the pilot CDISC data.\noptions(repos = c( pharmaverse = \u0026#39;https://pharmaverse.r-universe.dev\u0026#39;, CRAN = \u0026#39;https://cloud.r-project.org\u0026#39;)) library(metacore) library(metatools) library(admiral) library(xportr) library(dplyr) ## ## Attaching package: \u0026#39;dplyr\u0026#39; ## The following object is masked from \u0026#39;package:admiral\u0026#39;: ## ## filter_if ## The following objects are masked from \u0026#39;package:stats\u0026#39;: ## ## filter, lag ## The following objects are masked from \u0026#39;package:base\u0026#39;: ## ## intersect, setdiff, setequal, union library(tidyr) library(safetyData) library(lubridate) ## ## Attaching package: \u0026#39;lubridate\u0026#39; ## The following objects are masked from \u0026#39;package:base\u0026#39;: ## ## date, intersect, setdiff, union library(stringr) # Read in data data(\u0026quot;sdtm_dm\u0026quot;) data(\u0026quot;sdtm_ds\u0026quot;) data(\u0026quot;sdtm_ex\u0026quot;) data(\u0026quot;sdtm_vs\u0026quot;) data(\u0026quot;sdtm_lb\u0026quot;) data(\u0026quot;sdtm_sv\u0026quot;) data(\u0026quot;sdtm_sc\u0026quot;) data(\u0026quot;sdtm_mh\u0026quot;) data(\u0026quot;sdtm_qs\u0026quot;) # Read in metacore object load(metacore_example(\u0026quot;pilot_ADaM.rda\u0026quot;)) metacore \u0026lt;- metacore %\u0026gt;% select_dataset(\u0026quot;ADSL\u0026quot;) Start Building The first thing we are going to do is pull through all the columns that come directly from the SDTM datasets. You might know which datasets you are going to pull from directly already, but if you don’t you can call build_from_derived with just an empty list and the error will tell you which datasets you need to supply.\nbuild_from_derived(metacore, list(), predecessor_only = FALSE) ## Error in build_from_derived(metacore, list(), predecessor_only = FALSE): Not all datasets provided. Please pass the following dataset(s): ## DM In this case all the columns come from DM so that is the only dataset I will pass into build_from_derived. The resulting dataset has all the columns combined and any columns that needed renaming between SDTM and ADAM are renamed.\nadsl_preds \u0026lt;- build_from_derived(metacore, ds_list = list(\u0026quot;dm\u0026quot; = sdtm_dm), predecessor_only = FALSE, keep = TRUE) head(adsl_preds) ## STUDYID USUBJID SUBJID SITEID ARM AGE AGEU RACE ## 1 CDISCPILOT01 01-701-1015 1015 701 Placebo 63 YEARS WHITE ## 2 CDISCPILOT01 01-701-1023 1023 701 Placebo 64 YEARS WHITE ## 3 CDISCPILOT01 01-701-1028 1028 701 Xanomeline High Dose 71 YEARS WHITE ## 4 CDISCPILOT01 01-701-1033 1033 701 Xanomeline Low Dose 74 YEARS WHITE ## 5 CDISCPILOT01 01-701-1034 1034 701 Xanomeline High Dose 77 YEARS WHITE ## 6 CDISCPILOT01 01-701-1047 1047 701 Placebo 85 YEARS WHITE ## SEX ETHNIC DTHFL RFSTDTC RFENDTC TRT01P ## 1 F HISPANIC OR LATINO \u0026lt;NA\u0026gt; 2014-01-02 2014-07-02 Placebo ## 2 M HISPANIC OR LATINO \u0026lt;NA\u0026gt; 2012-08-05 2012-09-02 Placebo ## 3 M NOT HISPANIC OR LATINO \u0026lt;NA\u0026gt; 2013-07-19 2014-01-14 Xanomeline High Dose ## 4 M NOT HISPANIC OR LATINO \u0026lt;NA\u0026gt; 2014-03-18 2014-04-14 Xanomeline Low Dose ## 5 F NOT HISPANIC OR LATINO \u0026lt;NA\u0026gt; 2014-07-01 2014-12-30 Xanomeline High Dose ## 6 F NOT HISPANIC OR LATINO \u0026lt;NA\u0026gt; 2013-02-12 2013-03-29 Placebo Now we have the base dataset, we can start to create some variables. I am going to start with creating the subgroups using the control terminology, in this case AGEGR1. The metacore object holds all the metadata needed to make ADSL. Part of that metadat is the control terminology, which can help automate the creation of subgroups. We can look into the metacore object and see the control terminology for AGRGR1.\nget_control_term(metacore, variable = AGEGR1) ## # A tibble: 3 × 2 ## code decode ## \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; ## 1 \u0026lt;65 \u0026lt;65 ## 2 65-80 65-80 ## 3 \u0026gt;80 \u0026gt;80 Because this control terminology is written in a fairly standard format we can automate the creation of AGEGR1. The {metatools} function create_cat_var takes in a metacore object, a reference variable, in this case AGE because the is the continues variable AGEGR1 created from, and the name of the sub-grouped variable. It will take the control terminology from the sub-grouped variable and cut the reference variables accordingly.\nUsing a similar philosophy we can create the numeric version of RACE and TRT01P using the control terminology stored in the metacore object with the create_var_from_codelist function in {metatools}\nadsl_preds %\u0026gt;% create_cat_var(metacore, ref_var = AGE, grp_var = AGEGR1, num_grp_var = AGEGR1N) %\u0026gt;% select(AGE, AGEGR1, AGEGR1N) ## AGE AGEGR1 AGEGR1N ## 1 63 \u0026lt;65 1 ## 2 64 \u0026lt;65 1 ## 3 71 65-80 2 ## 4 74 65-80 2 ## 5 77 65-80 2 ## 6 85 \u0026gt;80 3 ## 7 59 \u0026lt;65 1 ## 8 68 65-80 2 ## 9 81 \u0026gt;80 3 ## 10 84 \u0026gt;80 3 ## 11 52 \u0026lt;65 1 ## 12 84 \u0026gt;80 3 ## 13 81 \u0026gt;80 3 ## 14 57 \u0026lt;65 1 ## 15 75 65-80 2 ## 16 57 \u0026lt;65 1 ## 17 79 65-80 2 ## 18 82 \u0026gt;80 3 ## 19 62 \u0026lt;65 1 ## 20 56 \u0026lt;65 1 ## 21 79 65-80 2 ## 22 71 65-80 2 ## 23 80 65-80 2 ## 24 81 \u0026gt;80 3 ## 25 76 65-80 2 ## 26 69 65-80 2 ## 27 56 \u0026lt;65 1 ## 28 57 \u0026lt;65 1 ## 29 61 \u0026lt;65 1 ## 30 56 \u0026lt;65 1 ## 31 67 65-80 2 ## 32 61 \u0026lt;65 1 ## 33 80 65-80 2 ## 34 68 65-80 2 ## 35 79 65-80 2 ## 36 51 \u0026lt;65 1 ## 37 63 \u0026lt;65 1 ## 38 54 \u0026lt;65 1 ## 39 67 65-80 2 ## 40 81 \u0026gt;80 3 ## 41 74 65-80 2 ## 42 72 65-80 2 ## 43 71 65-80 2 ## 44 87 \u0026gt;80 3 ## 45 78 65-80 2 ## 46 76 65-80 2 ## 47 85 \u0026gt;80 3 ## 48 84 \u0026gt;80 3 ## 49 70 65-80 2 ## 50 57 \u0026lt;65 1 ## 51 63 \u0026lt;65 1 ## 52 84 \u0026gt;80 3 ## 53 64 \u0026lt;65 1 ## 54 69 65-80 2 ## 55 71 65-80 2 ## 56 81 \u0026gt;80 3 ## 57 84 \u0026gt;80 3 ## 58 81 \u0026gt;80 3 ## 59 75 65-80 2 ## 60 84 \u0026gt;80 3 ## 61 76 65-80 2 ## 62 72 65-80 2 ## 63 78 65-80 2 ## 64 72 65-80 2 ## 65 88 \u0026gt;80 3 ## 66 81 \u0026gt;80 3 ## 67 67 65-80 2 ## 68 81 \u0026gt;80 3 ## 69 84 \u0026gt;80 3 ## 70 67 65-80 2 ## 71 76 65-80 2 ## 72 76 65-80 2 ## 73 83 \u0026gt;80 3 ## 74 80 65-80 2 ## 75 77 65-80 2 ## 76 81 \u0026gt;80 3 ## 77 75 65-80 2 ## 78 80 65-80 2 ## 79 79 65-80 2 ## 80 77 65-80 2 ## 81 71 65-80 2 ## 82 84 \u0026gt;80 3 ## 83 74 65-80 2 ## 84 67 65-80 2 ## 85 81 \u0026gt;80 3 ## 86 87 \u0026gt;80 3 ## 87 86 \u0026gt;80 3 ## 88 71 65-80 2 ## 89 82 \u0026gt;80 3 ## 90 68 65-80 2 ## 91 81 \u0026gt;80 3 ## 92 80 65-80 2 ## 93 70 65-80 2 ## 94 81 \u0026gt;80 3 ## 95 74 65-80 2 ## 96 75 65-80 2 ## 97 75 65-80 2 ## 98 69 65-80 2 ## 99 56 \u0026lt;65 1 ## 100 89 \u0026gt;80 3 ## 101 66 65-80 2 ## 102 78 65-80 2 ## 103 84 \u0026gt;80 3 ## 104 87 \u0026gt;80 3 ## 105 70 65-80 2 ## 106 56 \u0026lt;65 1 ## 107 73 65-80 2 ## 108 70 65-80 2 ## 109 60 \u0026lt;65 1 ## 110 72 65-80 2 ## 111 74 65-80 2 ## 112 86 \u0026gt;80 3 ## 113 63 \u0026lt;65 1 ## 114 82 \u0026gt;80 3 ## 115 84 \u0026gt;80 3 ## 116 87 \u0026gt;80 3 ## 117 68 65-80 2 ## 118 64 \u0026lt;65 1 ## 119 60 \u0026lt;65 1 ## 120 74 65-80 2 ## 121 72 65-80 2 ## 122 65 65-80 2 ## 123 72 65-80 2 ## 124 81 \u0026gt;80 3 ## 125 76 65-80 2 ## 126 80 65-80 2 ## 127 68 65-80 2 ## 128 62 \u0026lt;65 1 ## 129 73 65-80 2 ## 130 88 \u0026gt;80 3 ## 131 73 65-80 2 ## 132 74 65-80 2 ## 133 78 65-80 2 ## 134 81 \u0026gt;80 3 ## 135 77 65-80 2 ## 136 77 65-80 2 ## 137 70 65-80 2 ## 138 76 65-80 2 ## 139 78 65-80 2 ## 140 86 \u0026gt;80 3 ## 141 80 65-80 2 ## 142 61 \u0026lt;65 1 ## 143 82 \u0026gt;80 3 ## 144 80 65-80 2 ## 145 57 \u0026lt;65 1 ## 146 61 \u0026lt;65 1 ## 147 74 65-80 2 ## 148 73 65-80 2 ## 149 59 \u0026lt;65 1 ## 150 61 \u0026lt;65 1 ## 151 79 65-80 2 ## 152 87 \u0026gt;80 3 ## 153 87 \u0026gt;80 3 ## 154 84 \u0026gt;80 3 ## 155 67 65-80 2 ## 156 71 65-80 2 ## 157 84 \u0026gt;80 3 ## 158 76 65-80 2 ## 159 54 \u0026lt;65 1 ## 160 72 65-80 2 ## 161 82 \u0026gt;80 3 ## 162 86 \u0026gt;80 3 ## 163 69 65-80 2 ## 164 79 65-80 2 ## 165 71 65-80 2 ## 166 72 65-80 2 ## 167 77 65-80 2 ## 168 84 \u0026gt;80 3 ## 169 88 \u0026gt;80 3 ## 170 69 65-80 2 ## 171 82 \u0026gt;80 3 ## 172 87 \u0026gt;80 3 ## 173 62 \u0026lt;65 1 ## 174 60 \u0026lt;65 1 ## 175 65 65-80 2 ## 176 68 65-80 2 ## 177 75 65-80 2 ## 178 70 65-80 2 ## 179 81 \u0026gt;80 3 ## 180 77 65-80 2 ## 181 88 \u0026gt;80 3 ## 182 77 65-80 2 ## 183 79 65-80 2 ## 184 83 \u0026gt;80 3 ## 185 83 \u0026gt;80 3 ## 186 84 \u0026gt;80 3 ## 187 82 \u0026gt;80 3 ## 188 85 \u0026gt;80 3 ## 189 76 65-80 2 ## 190 81 \u0026gt;80 3 ## 191 89 \u0026gt;80 3 ## 192 69 65-80 2 ## 193 79 65-80 2 ## 194 76 65-80 2 ## 195 79 65-80 2 ## 196 84 \u0026gt;80 3 ## 197 81 \u0026gt;80 3 ## 198 80 65-80 2 ## 199 78 65-80 2 ## 200 56 \u0026lt;65 1 ## 201 79 65-80 2 ## 202 85 \u0026gt;80 3 ## 203 78 65-80 2 ## 204 83 \u0026gt;80 3 ## 205 86 \u0026gt;80 3 ## 206 81 \u0026gt;80 3 ## 207 78 65-80 2 ## 208 78 65-80 2 ## 209 83 \u0026gt;80 3 ## 210 73 65-80 2 ## 211 73 65-80 2 ## 212 82 \u0026gt;80 3 ## 213 88 \u0026gt;80 3 ## 214 89 \u0026gt;80 3 ## 215 80 65-80 2 ## 216 77 65-80 2 ## 217 80 65-80 2 ## 218 88 \u0026gt;80 3 ## 219 67 65-80 2 ## 220 86 \u0026gt;80 3 ## 221 70 65-80 2 ## 222 76 65-80 2 ## 223 74 65-80 2 ## 224 62 \u0026lt;65 1 ## 225 74 65-80 2 ## 226 82 \u0026gt;80 3 ## 227 75 65-80 2 ## 228 77 65-80 2 ## 229 61 \u0026lt;65 1 ## 230 84 \u0026gt;80 3 ## 231 78 65-80 2 ## 232 74 65-80 2 ## 233 74 65-80 2 ## 234 79 65-80 2 ## 235 64 \u0026lt;65 1 ## 236 77 65-80 2 ## 237 71 65-80 2 ## 238 73 65-80 2 ## 239 71 65-80 2 ## 240 88 \u0026gt;80 3 ## 241 79 65-80 2 ## 242 75 65-80 2 ## 243 77 65-80 2 ## 244 78 65-80 2 ## 245 81 \u0026gt;80 3 ## 246 77 65-80 2 ## 247 65 65-80 2 ## 248 50 \u0026lt;65 1 ## 249 59 \u0026lt;65 1 ## 250 78 65-80 2 ## 251 77 65-80 2 ## 252 65 65-80 2 ## 253 75 65-80 2 ## 254 75 65-80 2 ## 255 76 65-80 2 ## 256 69 65-80 2 ## 257 73 65-80 2 ## 258 79 65-80 2 ## 259 87 \u0026gt;80 3 ## 260 73 65-80 2 ## 261 83 \u0026gt;80 3 ## 262 74 65-80 2 ## 263 81 \u0026gt;80 3 ## 264 80 65-80 2 ## 265 78 65-80 2 ## 266 82 \u0026gt;80 3 ## 267 79 65-80 2 ## 268 86 \u0026gt;80 3 ## 269 83 \u0026gt;80 3 ## 270 85 \u0026gt;80 3 ## 271 83 \u0026gt;80 3 ## 272 68 65-80 2 ## 273 72 65-80 2 ## 274 81 \u0026gt;80 3 ## 275 73 65-80 2 ## 276 72 65-80 2 ## 277 76 65-80 2 ## 278 73 65-80 2 ## 279 76 65-80 2 ## 280 78 65-80 2 ## 281 59 \u0026lt;65 1 ## 282 84 \u0026gt;80 3 ## 283 74 65-80 2 ## 284 80 65-80 2 ## 285 85 \u0026gt;80 3 ## 286 72 65-80 2 ## 287 80 65-80 2 ## 288 84 \u0026gt;80 3 ## 289 73 65-80 2 ## 290 85 \u0026gt;80 3 ## 291 64 \u0026lt;65 1 ## 292 77 65-80 2 ## 293 75 65-80 2 ## 294 79 65-80 2 ## 295 67 65-80 2 ## 296 82 \u0026gt;80 3 ## 297 77 65-80 2 ## 298 73 65-80 2 ## 299 80 65-80 2 ## 300 74 65-80 2 ## 301 82 \u0026gt;80 3 ## 302 78 65-80 2 ## 303 86 \u0026gt;80 3 ## 304 79 65-80 2 ## 305 69 65-80 2 ## 306 74 65-80 2 adsl_ct \u0026lt;- adsl_preds %\u0026gt;% create_cat_var(metacore, ref_var = AGE, grp_var = AGEGR1, num_grp_var = AGEGR1N) %\u0026gt;% create_var_from_codelist(metacore, RACE, RACEN) %\u0026gt;% create_var_from_codelist(metacore, TRT01P, TRT01PN) %\u0026gt;% mutate( SITEID = as.character(SITEID), SITEGR1 = SITEID, TRT01A = TRT01P, TRT01AN = TRT01PN, ITTFL = if_else(!is.na(ARM) \u0026amp; ARM != \u0026quot;Screen Failure\u0026quot;, \u0026quot;Y\u0026quot;, \u0026quot;N\u0026quot;)) Now we have sorted out what we can we easily do with control terminology it is time to start coding up some variables. We are going to start with the exposure variables. We need to get the start and end of treatment as well as the treatment duration, the cumulative and the average dose.\nadsl_dates \u0026lt;- adsl_ct %\u0026gt;% derive_var_trtsdtm(dataset_ex = sdtm_ex) %\u0026gt;% # Derive Datetime of First Exposure to Treatment derive_var_trtedtm(dataset_ex = sdtm_ex) %\u0026gt;% # Derive Datetime of Last Exposure to Treatment derive_vars_dtm_to_dt(source_vars = vars(TRTSDTM, TRTEDTM)) %\u0026gt;% #Convert Datetime variables to date derive_var_trtdurd() %\u0026gt;% mutate(TRTDURD = as.numeric(TRTEDT - TRTSDT) + 1, #derive_var_trtdurd CUMDOSE = TRT01PN * TRTDURD, # switch to admiral AVGDD = CUMDOSE/TRTDURD, SAFFL = if_else(ITTFL == \u0026quot;Y\u0026quot; \u0026amp; !is.na(TRTSDT), \u0026quot;Y\u0026quot;, \u0026quot;N\u0026quot;)) %\u0026gt;% drop_unspec_vars(metacore) adsl_dispo \u0026lt;- adsl_dates %\u0026gt;% # Derive a Disposition Status derive_var_disposition_status( dataset_ds = sdtm_ds, new_var = EOSSTT, status_var = DSDECOD, filter = DSCAT == \u0026quot;DISPOSITION EVENT\u0026quot; ) %\u0026gt;% # Derive a Disposition Reason derive_vars_disposition_reason( dataset_ds = sdtm_ds, new_var = DCSREAS, reason_var = DSDECOD, filter = DSCAT == \u0026quot;DISPOSITION EVENT\u0026quot; \u0026amp; DSDECOD != \u0026quot;SCREEN FAILURE\u0026quot; ) %\u0026gt;% # Derived Disposition Date derive_var_disposition_dt( dataset_ds = sdtm_ds, new_var = RFENDT, dtc = DSSTDTC, filter_ds = DSCAT == \u0026quot;OTHER EVENT\u0026quot; \u0026amp; DSDECOD == \u0026quot;FINAL RETRIEVAL VISIT\u0026quot; ) %\u0026gt;% # Getting the standardize dispositions from codelist create_var_from_codelist(metacore, EOSSTT, DCDECOD) %\u0026gt;% # Creating disposition flags mutate( DISCONFL = if_else(DCDECOD != \u0026quot;COMPLETED\u0026quot;, \u0026quot;Y\u0026quot;, NA_character_), DSRAEFL = if_else(DCDECOD != \u0026quot;ADVERSE EVENT\u0026quot;, \u0026quot;Y\u0026quot;, NA_character_)) # Get end of treatment visit adsl_dispo \u0026lt;- sdtm_ds %\u0026gt;% filter(DSTERM ==\u0026#39;PROTOCOL COMPLETED\u0026#39;) %\u0026gt;% mutate(VISNUMEN = if_else(VISITNUM == 13, 12, VISITNUM)) %\u0026gt;% select(USUBJID, VISNUMEN) %\u0026gt;% left_join(adsl_dispo, ., by = \u0026quot;USUBJID\u0026quot;) # Get heights at screening cause those are the only heights available heights \u0026lt;- sdtm_vs %\u0026gt;% filter(VISITNUM == 1, VSTESTCD == \u0026#39;HEIGHT\u0026#39;) %\u0026gt;% select(USUBJID, VSTEST, VSSTRESN) bmis \u0026lt;- sdtm_vs %\u0026gt;% # Get baseline weight filter( VISITNUM == 3, VSTESTCD == \u0026quot;WEIGHT\u0026quot;) %\u0026gt;% select(USUBJID, VSTEST, VSSTRESN) %\u0026gt;% # Combine with height bind_rows(heights) %\u0026gt;% # Pivot to a row per subject and calculate BMIBL pivot_wider(names_from = VSTEST, values_from = VSSTRESN) %\u0026gt;% mutate(BMIBL = compute_bmi(Height, Weight)) %\u0026gt;% rename(WEIGHTBL = Weight, HEIGHTBL = Height) %\u0026gt;% # Create the BMI grouping using the control terminology create_cat_var(metacore, BMIBL, BMIBLGR1) bmis  ## # A tibble: 254 × 5 ## USUBJID WEIGHTBL HEIGHTBL BMIBL BMIBLGR1 ## \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;chr\u0026gt; ## 1 01-701-1015 54.4 147. 25.1 25-\u0026lt;30 ## 2 01-701-1023 80.3 163. 30.4 \u0026gt;=30 ## 3 01-701-1028 99.3 178. 31.4 \u0026gt;=30 ## 4 01-701-1033 88.4 175. 28.8 25-\u0026lt;30 ## 5 01-701-1034 62.6 155. 26.1 25-\u0026lt;30 ## 6 01-701-1047 67.1 149. 30.4 \u0026gt;=30 ## 7 01-701-1097 78.0 169. 27.3 25-\u0026lt;30 ## 8 01-701-1111 59.9 158. 23.9 \u0026lt;25 ## 9 01-701-1115 78.9 182. 23.9 \u0026lt;25 ## 10 01-701-1118 71.2 180. 21.9 \u0026lt;25 ## # … with 244 more rows adsl_bmi \u0026lt;- left_join(adsl_dispo, bmis, by = \u0026quot;USUBJID\u0026quot;)  Apply Codelists completer_cal \u0026lt;- function(.data, wk_num, sv){ new_col \u0026lt;- paste0(\u0026quot;COMP\u0026quot;, wk_num, \u0026quot;FL\u0026quot;) %\u0026gt;% sym() sv %\u0026gt;% group_by(USUBJID) %\u0026gt;% filter(VISIT == paste(\u0026quot;WEEK\u0026quot;, wk_num)) %\u0026gt;% select(USUBJID, SVSTDTC) %\u0026gt;% left_join(.data, . , by = \u0026quot;USUBJID\u0026quot;) %\u0026gt;% mutate({{new_col }}:= ifelse(!is.na(SVSTDTC) \u0026amp;\u0026amp; TRTEDT \u0026gt;= SVSTDTC, \u0026quot;Y\u0026quot;, \u0026quot;N\u0026quot;)) %\u0026gt;% select(-SVSTDTC) } first_visit \u0026lt;- sdtm_sv %\u0026gt;% filter(VISITNUM == 1) %\u0026gt;% mutate(VISIT1DT = as_date(SVSTDTC)) %\u0026gt;% select(USUBJID, VISIT1DT) adsl_fls \u0026lt;- adsl_bmi %\u0026gt;% completer_cal(8, sdtm_sv) %\u0026gt;% completer_cal(16, sdtm_sv) %\u0026gt;% completer_cal(24, sdtm_sv) %\u0026gt;% left_join(first_visit, by= \u0026quot;USUBJID\u0026quot;) ## Warning in !is.na(SVSTDTC) \u0026amp;\u0026amp; TRTEDT \u0026gt;= SVSTDTC: \u0026#39;length(x) = 306 \u0026gt; 1\u0026#39; in ## coercion to \u0026#39;logical(1)\u0026#39; ## Warning in !is.na(SVSTDTC) \u0026amp;\u0026amp; TRTEDT \u0026gt;= SVSTDTC: \u0026#39;length(x) = 306 \u0026gt; 1\u0026#39; in ## coercion to \u0026#39;logical(1)\u0026#39; ## Warning in !is.na(SVSTDTC) \u0026amp;\u0026amp; TRTEDT \u0026gt;= SVSTDTC: \u0026#39;length(x) = 306 \u0026gt; 1\u0026#39; in ## coercion to \u0026#39;logical(1)\u0026#39; ## Warning in !is.na(SVSTDTC) \u0026amp;\u0026amp; TRTEDT \u0026gt;= SVSTDTC: \u0026#39;length(x) = 306 \u0026gt; 1\u0026#39; in ## coercion to \u0026#39;logical(1)\u0026#39; ## Warning in !is.na(SVSTDTC) \u0026amp;\u0026amp; TRTEDT \u0026gt;= SVSTDTC: \u0026#39;length(x) = 306 \u0026gt; 1\u0026#39; in ## coercion to \u0026#39;logical(1)\u0026#39; ## Warning in !is.na(SVSTDTC) \u0026amp;\u0026amp; TRTEDT \u0026gt;= SVSTDTC: \u0026#39;length(x) = 306 \u0026gt; 1\u0026#39; in ## coercion to \u0026#39;logical(1)\u0026#39; adsl_ed \u0026lt;- sdtm_sc %\u0026gt;% filter(SCTESTCD == \u0026quot;EDLEVEL\u0026quot;) %\u0026gt;% select(USUBJID, SCSTRESN) %\u0026gt;% rename(EDUCLVL = SCSTRESN) %\u0026gt;% left_join(adsl_fls, ., by = \u0026quot;USUBJID\u0026quot;) adsl_alz \u0026lt;- sdtm_qs %\u0026gt;% group_by(USUBJID) %\u0026gt;% filter(QSCAT == \u0026quot;ALZHEIMER\u0026#39;S DISEASE ASSESSMENT SCALE\u0026quot;) %\u0026gt;% summarise(MMSETOT = sum(as.numeric(QSORRES), na.rm = TRUE)) %\u0026gt;% left_join(adsl_ed, ., by = \u0026quot;USUBJID\u0026quot;) adsl_mh \u0026lt;- sdtm_mh %\u0026gt;% filter(MHCAT == \u0026quot;PRIMARY DIAGNOSIS\u0026quot;) %\u0026gt;% mutate(DISONSDT = as_date(MHSTDTC)) %\u0026gt;% select(USUBJID, DISONSDT) %\u0026gt;% left_join(adsl_alz, ., by = \u0026quot;USUBJID\u0026quot;) %\u0026gt;% mutate(DURDIS = interval(DISONSDT, VISIT1DT) %/% months(1)) %\u0026gt;% create_cat_var(metacore, DURDIS, DURDSGR1) adsl_raw \u0026lt;- sdtm_qs %\u0026gt;% filter(VISITNUM \u0026gt; 3) %\u0026gt;% group_by(USUBJID) %\u0026gt;% summarise(efffl = any(QSTEST == \u0026quot;ADAS-COG(11) Subscore\u0026quot;) \u0026amp; any(QSTESTCD == \u0026quot;CIBIC\u0026quot;)) %\u0026gt;% left_join(adsl_mh, by = \u0026quot;USUBJID\u0026quot;) %\u0026gt;% mutate(EFFFL = if_else(efffl \u0026amp; SAFFL == \u0026quot;Y\u0026quot;, \u0026quot;Y\u0026quot;, \u0026quot;N\u0026quot;)) %\u0026gt;% drop_unspec_vars(metacore) #This will drop any columns that aren\u0026#39;t specificed in the metacore object Now we have all the variables defined we can run some checks before applying the necessary formatting.\ntest \u0026lt;- metacore$var_spec %\u0026gt;% select(variable, type) %\u0026gt;% mutate(dataset = \u0026quot;ADSL\u0026quot;) adsl_raw %\u0026gt;% check_variables(metacore) %\u0026gt;% # Check all variables specified are present and no more check_ct_data(metacore) %\u0026gt;% # Checks all variables with CT only contain values within the CT order_cols(metacore) %\u0026gt;% # Orders the columns according to the spec sort_by_key(metacore) %\u0026gt;% # Sorts the rows by the sort keys xportr_type(test) %\u0026gt;% # Coerce variable type to match spec xportr_length(metacore) %\u0026gt;% # Assigns SAS length from a variable level metadata xportr_label(metacore) %\u0026gt;% # Assigns variable label from metacore specifications xportr_df_label(metacore) # Assigns dataset label from metacore specifications ## No missing or extra variables ## # A tibble: 248 × 49 ## STUDYID USUBJID SUBJID SITEID SITEGR1 ARM TRT01P TRT01PN TRT01A TRT01AN ## \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; ## 1 CDISCPILOT… 01-701… 1015 701 701 Plac… Place… 0 Place… 0 ## 2 CDISCPILOT… 01-701… 1023 701 701 Plac… Place… 0 Place… 0 ## 3 CDISCPILOT… 01-701… 1028 701 701 Xano… Xanom… 81 Xanom… 81 ## 4 CDISCPILOT… 01-701… 1033 701 701 Xano… Xanom… 54 Xanom… 54 ## 5 CDISCPILOT… 01-701… 1034 701 701 Xano… Xanom… 81 Xanom… 81 ## 6 CDISCPILOT… 01-701… 1047 701 701 Plac… Place… 0 Place… 0 ## 7 CDISCPILOT… 01-701… 1097 701 701 Xano… Xanom… 54 Xanom… 54 ## 8 CDISCPILOT… 01-701… 1111 701 701 Xano… Xanom… 54 Xanom… 54 ## 9 CDISCPILOT… 01-701… 1115 701 701 Xano… Xanom… 54 Xanom… 54 ## 10 CDISCPILOT… 01-701… 1118 701 701 Plac… Place… 0 Place… 0 ## # … with 238 more rows, and 39 more variables: TRTSDT \u0026lt;dbl\u0026gt;, TRTEDT \u0026lt;dbl\u0026gt;, ## # TRTDURD \u0026lt;dbl\u0026gt;, AVGDD \u0026lt;dbl\u0026gt;, CUMDOSE \u0026lt;dbl\u0026gt;, AGE \u0026lt;dbl\u0026gt;, AGEGR1 \u0026lt;chr\u0026gt;, ## # AGEGR1N \u0026lt;dbl\u0026gt;, AGEU \u0026lt;chr\u0026gt;, RACE \u0026lt;chr\u0026gt;, RACEN \u0026lt;dbl\u0026gt;, SEX \u0026lt;chr\u0026gt;, ## # ETHNIC \u0026lt;chr\u0026gt;, SAFFL \u0026lt;chr\u0026gt;, ITTFL \u0026lt;chr\u0026gt;, EFFFL \u0026lt;chr\u0026gt;, COMP8FL \u0026lt;chr\u0026gt;, ## # COMP16FL \u0026lt;chr\u0026gt;, COMP24FL \u0026lt;chr\u0026gt;, DISCONFL \u0026lt;chr\u0026gt;, DSRAEFL \u0026lt;chr\u0026gt;, DTHFL \u0026lt;chr\u0026gt;, ## # BMIBL \u0026lt;dbl\u0026gt;, BMIBLGR1 \u0026lt;chr\u0026gt;, HEIGHTBL \u0026lt;dbl\u0026gt;, WEIGHTBL \u0026lt;dbl\u0026gt;, EDUCLVL \u0026lt;dbl\u0026gt;, ## # DISONSDT \u0026lt;dbl\u0026gt;, DURDIS \u0026lt;dbl\u0026gt;, DURDSGR1 \u0026lt;chr\u0026gt;, VISIT1DT \u0026lt;dbl\u0026gt;, …  "
},
{
	"uri": "/",
	"title": "Learn Theme for Hugo",
	"tags": [],
	"description": "",
	"content": "pharmaverse examples Here are some examples!!\nSome more copy.\n Data  STDM, ADaM and other data products\n  Create ADSL  An example of how to generate an ADSL dataset from STDM\n    "
},
{
	"uri": "/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]