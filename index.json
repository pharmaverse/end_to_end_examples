[
{
	"uri": "/data/",
	"title": "Data",
	"tags": [],
	"description": "STDM, ADaM and other data products",
	"content": "Section 1 Data Engineering examples This section will contain examples generating STDM, ADaM and other data derivatives.\nInitially we start with one example of how to produce the subject level ADaM (ADSL).\n"
},
{
	"uri": "/output/",
	"title": "TLGs",
	"tags": [],
	"description": "Output and other products",
	"content": "Section 2 Output examples This section will contain examples generating output demographics.\nInitially we start with one example of how to produce the demographics tables based on ADaM (ADSL).\n"
},
{
	"uri": "/app/",
	"title": "IDDs/Apps",
	"tags": [],
	"description": "Shiny APP",
	"content": "Section 3 Shiny APP examples This section will contain examples creating APP (interactive data display) with demographics output.\nInitially we start with one example of how to produce the demographics APP based on ADaM (ADSL).\n"
},
{
	"uri": "/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/data/adsl/",
	"title": "Create ADSL",
	"tags": [],
	"description": "An example of how to generate an ADSL dataset from STDM",
	"content": " Introduction This guide will show you how four pharmaverse packages, along with some from tidyverse, can be used to create an ADaM such as ADSL end-to-end, using the pilot CDISC SDTM data as input.\nThe four packages used with a brief description of their purpose are as follows:\n{metacore}: provides harmonized metadata/specifications object. {metatools}: uses the provided metadata to build/enhance and check the dataset. {admiral}: provides the ADaM derivations. {xportr}: delivers the SAS transport file (XPT) and eSub checks. It is important to understand {metacore} objects by reading through the above linked package site, as these are fundamental to being able to use {metatools} and {xportr}. Each company may need to build a specification reader to create these objects from their source standard specification templates.\nLoad Data and Required pharmaverse Packages The first step is to load our pharmaverse packages and input data.\noptions(repos = c( pharmaverse = \u0026#39;https://pharmaverse.r-universe.dev\u0026#39;, CRAN = \u0026#39;https://cloud.r-project.org\u0026#39;)) library(metacore) library(metatools) library(admiral.test) library(admiral) library(xportr) library(dplyr) library(tidyr) library(lubridate) library(stringr) # Read in input SDTM data data(\u0026quot;admiral_dm\u0026quot;) data(\u0026quot;admiral_ex\u0026quot;) Next we need to load the specification file in the form of a {metacore} object.\n# Read in metacore object load(metacore_example(\u0026quot;pilot_ADaM.rda\u0026quot;)) metacore \u0026lt;- metacore %\u0026gt;% select_dataset(\u0026quot;ADSL\u0026quot;) Here is an example of how a {metacore} object looks showing variable level metadata:\nmetacore$ds_vars ## # A tibble: 49 × 7 ## dataset variable key_seq order keep core supp_flag ## \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;lgl\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;lgl\u0026gt; ## 1 ADSL STUDYID NA 1 FALSE \u0026lt;NA\u0026gt; NA ## 2 ADSL USUBJID 1 2 FALSE \u0026lt;NA\u0026gt; NA ## 3 ADSL SUBJID NA 3 FALSE \u0026lt;NA\u0026gt; NA ## 4 ADSL SITEID NA 4 FALSE \u0026lt;NA\u0026gt; NA ## 5 ADSL SITEGR1 NA 5 FALSE \u0026lt;NA\u0026gt; NA ## 6 ADSL ARM NA 6 FALSE \u0026lt;NA\u0026gt; NA ## 7 ADSL TRT01P NA 7 FALSE \u0026lt;NA\u0026gt; NA ## 8 ADSL TRT01PN NA 8 FALSE \u0026lt;NA\u0026gt; NA ## 9 ADSL TRT01A NA 9 FALSE \u0026lt;NA\u0026gt; NA ## 10 ADSL TRT01AN NA 10 FALSE \u0026lt;NA\u0026gt; NA ## # … with 39 more rows Start Building Derivations The first derivation step we are going to do is to pull through all the columns that come directly from the SDTM datasets. You might know which datasets you are going to pull from directly already, but if you don’t you can call metatools::build_from_derived() with just an empty list and the error will tell you which datasets you need to supply.\nbuild_from_derived(metacore, list(), predecessor_only = FALSE) ## Error in build_from_derived(metacore, list(), predecessor_only = FALSE): Not all datasets provided. Please pass the following dataset(s): ## DM In this case all the columns come from DM so that is the only dataset we will pass into metatools::build_from_derived(). The resulting dataset has all the columns combined and any columns that needed renaming between SDTM and ADaM are renamed.\nadsl_preds \u0026lt;- build_from_derived(metacore, ds_list = list(\u0026quot;dm\u0026quot; = admiral_dm), predecessor_only = FALSE, keep = TRUE) head(adsl_preds, n=10) ## # A tibble: 10 × 14 ## STUDYID USUBJID SUBJID SITEID ARM AGE AGEU RACE SEX ETHNIC DTHFL ## \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; ## 1 CDISCPILOT01 01-701… 1015 701 Plac… 63 YEARS WHITE F HISPA… \u0026quot;\u0026quot; ## 2 CDISCPILOT01 01-701… 1023 701 Plac… 64 YEARS WHITE M HISPA… \u0026quot;\u0026quot; ## 3 CDISCPILOT01 01-701… 1028 701 Xano… 71 YEARS WHITE M NOT H… \u0026quot;\u0026quot; ## 4 CDISCPILOT01 01-701… 1033 701 Xano… 74 YEARS WHITE M NOT H… \u0026quot;\u0026quot; ## 5 CDISCPILOT01 01-701… 1034 701 Xano… 77 YEARS WHITE F NOT H… \u0026quot;\u0026quot; ## 6 CDISCPILOT01 01-701… 1047 701 Plac… 85 YEARS WHITE F NOT H… \u0026quot;\u0026quot; ## 7 CDISCPILOT01 01-701… 1057 701 Scre… 59 YEARS WHITE F HISPA… \u0026quot;\u0026quot; ## 8 CDISCPILOT01 01-701… 1097 701 Xano… 68 YEARS WHITE M NOT H… \u0026quot;\u0026quot; ## 9 CDISCPILOT01 01-701… 1111 701 Xano… 81 YEARS WHITE F NOT H… \u0026quot;\u0026quot; ## 10 CDISCPILOT01 01-701… 1115 701 Xano… 84 YEARS WHITE M NOT H… \u0026quot;\u0026quot; ## # … with 3 more variables: RFSTDTC \u0026lt;chr\u0026gt;, RFENDTC \u0026lt;chr\u0026gt;, TRT01P \u0026lt;chr\u0026gt; Now we have the base dataset, we can start to create some variables. We can start with creating the subgroups using the controlled terminology, in this case AGEGR1. The metacore object holds all the metadata needed to make ADSL. Part of that metadata is the controlled terminology, which can help automate the creation of subgroups. We can look into the {metacore} object and see the controlled terminology for AGEGR1.\nget_control_term(metacore, variable = AGEGR1) ## # A tibble: 3 × 2 ## code decode ## \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; ## 1 \u0026lt;65 \u0026lt;65 ## 2 65-80 65-80 ## 3 \u0026gt;80 \u0026gt;80 Because this controlled terminology is written in a fairly standard format we can automate the creation of AGEGR1. The function metatools::create_cat_var() takes in a {metacore} object, a reference variable - in this case AGE because that is the continuous variable AGEGR1 is created from, and the name of the sub-grouped variable. It will take the controlled terminology from the sub-grouped variable and group the reference variables accordingly.\nUsing a similar philosophy we can create the numeric version of RACE using the controlled terminology stored in the {metacore} object with the metatools::create_var_from_codelist() function.\nadsl_ct \u0026lt;- adsl_preds %\u0026gt;% create_cat_var(metacore, ref_var = AGE, grp_var = AGEGR1, num_grp_var = AGEGR1N) %\u0026gt;% create_var_from_codelist(metacore = metacore, input_var = RACE, out_var = RACEN) %\u0026gt;% #Removing screen failures from ARM and TRT01P to match the define and FDA guidence mutate(ARM = if_else(ARM == \u0026quot;Screen Failure\u0026quot;, NA_character_, ARM), TRT01P = if_else(TRT01P == \u0026quot;Screen Failure\u0026quot;, NA_character_, TRT01P) ) head(adsl_ct, n=10) ## # A tibble: 10 × 17 ## STUDYID USUBJID SUBJID SITEID ARM AGE AGEU RACE SEX ETHNIC DTHFL ## \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; ## 1 CDISCPILOT01 01-701… 1015 701 Plac… 63 YEARS WHITE F HISPA… \u0026quot;\u0026quot; ## 2 CDISCPILOT01 01-701… 1023 701 Plac… 64 YEARS WHITE M HISPA… \u0026quot;\u0026quot; ## 3 CDISCPILOT01 01-701… 1028 701 Xano… 71 YEARS WHITE M NOT H… \u0026quot;\u0026quot; ## 4 CDISCPILOT01 01-701… 1033 701 Xano… 74 YEARS WHITE M NOT H… \u0026quot;\u0026quot; ## 5 CDISCPILOT01 01-701… 1034 701 Xano… 77 YEARS WHITE F NOT H… \u0026quot;\u0026quot; ## 6 CDISCPILOT01 01-701… 1047 701 Plac… 85 YEARS WHITE F NOT H… \u0026quot;\u0026quot; ## 7 CDISCPILOT01 01-701… 1057 701 \u0026lt;NA\u0026gt; 59 YEARS WHITE F HISPA… \u0026quot;\u0026quot; ## 8 CDISCPILOT01 01-701… 1097 701 Xano… 68 YEARS WHITE M NOT H… \u0026quot;\u0026quot; ## 9 CDISCPILOT01 01-701… 1111 701 Xano… 81 YEARS WHITE F NOT H… \u0026quot;\u0026quot; ## 10 CDISCPILOT01 01-701… 1115 701 Xano… 84 YEARS WHITE M NOT H… \u0026quot;\u0026quot; ## # … with 6 more variables: RFSTDTC \u0026lt;chr\u0026gt;, RFENDTC \u0026lt;chr\u0026gt;, TRT01P \u0026lt;chr\u0026gt;, ## # AGEGR1 \u0026lt;chr\u0026gt;, AGEGR1N \u0026lt;dbl\u0026gt;, RACEN \u0026lt;dbl\u0026gt; Now we have sorted out what we can easily do with controlled terminology it is time to start deriving some variables. Here you could refer directly to using the {admiral} template and vignette in practice, but for the purpose of this end-to-end ADaM vignette we will share a few exposure derivations from there. We derive the start and end of treatment, the treatment duration, and the safety population flag.\nadsl_raw \u0026lt;- adsl_ct %\u0026gt;% derive_vars_merged_dtm( dataset_add = admiral_ex, filter_add = (EXDOSE \u0026gt; 0 | (EXDOSE == 0 \u0026amp; str_detect(EXTRT, \u0026quot;PLACEBO\u0026quot;))) \u0026amp; nchar(EXSTDTC) \u0026gt;= 10, new_vars_prefix = \u0026quot;TRTS\u0026quot;, dtc = EXSTDTC, order = vars(TRTSDTM, EXSEQ), mode = \u0026quot;first\u0026quot;, by_vars = vars(STUDYID, USUBJID) ) %\u0026gt;% derive_vars_merged_dtm( dataset_add = admiral_ex, filter_add = (EXDOSE \u0026gt; 0 | (EXDOSE == 0 \u0026amp; str_detect(EXTRT, \u0026quot;PLACEBO\u0026quot;))) \u0026amp; nchar(EXENDTC) \u0026gt;= 10, new_vars_prefix = \u0026quot;TRTE\u0026quot;, dtc = EXENDTC, time_imputation = \u0026quot;last\u0026quot;, order = vars(TRTEDTM, EXSEQ), mode = \u0026quot;last\u0026quot;, by_vars = vars(STUDYID, USUBJID) ) %\u0026gt;% derive_vars_dtm_to_dt(source_vars = vars(TRTSDTM, TRTEDTM)) %\u0026gt;% #Convert Datetime variables to date derive_var_trtdurd() %\u0026gt;% derive_var_merged_exist_flag( dataset_add = admiral_ex, by_vars = vars(STUDYID, USUBJID), new_var = SAFFL, condition = (EXDOSE \u0026gt; 0 | (EXDOSE == 0 \u0026amp; str_detect(EXTRT, \u0026quot;PLACEBO\u0026quot;))) ) %\u0026gt;% drop_unspec_vars(metacore) #This will drop any columns that aren\u0026#39;t specificed in the metacore object head(adsl_raw, n=10) ## # A tibble: 10 × 21 ## STUDYID USUBJID SUBJID SITEID ARM AGE AGEU RACE SEX ETHNIC DTHFL ## \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; ## 1 CDISCPILOT01 01-701… 1015 701 Plac… 63 YEARS WHITE F HISPA… \u0026quot;\u0026quot; ## 2 CDISCPILOT01 01-701… 1023 701 Plac… 64 YEARS WHITE M HISPA… \u0026quot;\u0026quot; ## 3 CDISCPILOT01 01-701… 1028 701 Xano… 71 YEARS WHITE M NOT H… \u0026quot;\u0026quot; ## 4 CDISCPILOT01 01-701… 1033 701 Xano… 74 YEARS WHITE M NOT H… \u0026quot;\u0026quot; ## 5 CDISCPILOT01 01-701… 1034 701 Xano… 77 YEARS WHITE F NOT H… \u0026quot;\u0026quot; ## 6 CDISCPILOT01 01-701… 1047 701 Plac… 85 YEARS WHITE F NOT H… \u0026quot;\u0026quot; ## 7 CDISCPILOT01 01-701… 1057 701 \u0026lt;NA\u0026gt; 59 YEARS WHITE F HISPA… \u0026quot;\u0026quot; ## 8 CDISCPILOT01 01-701… 1097 701 Xano… 68 YEARS WHITE M NOT H… \u0026quot;\u0026quot; ## 9 CDISCPILOT01 01-701… 1111 701 Xano… 81 YEARS WHITE F NOT H… \u0026quot;\u0026quot; ## 10 CDISCPILOT01 01-701… 1115 701 Xano… 84 YEARS WHITE M NOT H… \u0026quot;\u0026quot; ## # … with 10 more variables: RFSTDTC \u0026lt;chr\u0026gt;, RFENDTC \u0026lt;chr\u0026gt;, TRT01P \u0026lt;chr\u0026gt;, ## # AGEGR1 \u0026lt;chr\u0026gt;, AGEGR1N \u0026lt;dbl\u0026gt;, RACEN \u0026lt;dbl\u0026gt;, TRTSDT \u0026lt;date\u0026gt;, TRTEDT \u0026lt;date\u0026gt;, ## # TRTDURD \u0026lt;dbl\u0026gt;, SAFFL \u0026lt;chr\u0026gt; Apply Metadata to Create an eSub XPT and Perform Associated Checks Now we have all the variables defined we can run some checks before applying the necessary formatting. The top four functions performing checks and sorting/ordering come from {metatools}, whereas the others focused around applying attributes to prepare for XPT come from {xportr}. At the end you could add a call to xportr::xportr_write() to produce the XPT file.\nadsl_raw %\u0026gt;% check_variables(metacore) %\u0026gt;% # Check all variables specified are present and no more check_ct_data(metacore, na_acceptable = TRUE) %\u0026gt;% # Checks all variables with CT only contain values within the CT order_cols(metacore) %\u0026gt;% # Orders the columns according to the spec sort_by_key(metacore) %\u0026gt;% # Sorts the rows by the sort keys xportr_type(metacore) %\u0026gt;% # Coerce variable type to match spec xportr_length(metacore) %\u0026gt;% # Assigns SAS length from a variable level metadata xportr_label(metacore) %\u0026gt;% # Assigns variable label from metacore specifications xportr_df_label(metacore) # Assigns dataset label from metacore specifications ## # A tibble: 306 × 49 ## STUDYID USUBJID SUBJID SITEID SITEGR1 ARM TRT01P TRT01PN TRT01A TRT01AN ## \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; ## 1 NA NA 1015 701 NA NA NA NA NA NA ## 2 NA NA 1023 701 NA NA NA NA NA NA ## 3 NA NA 1028 701 NA NA NA NA NA NA ## 4 NA NA 1033 701 NA NA NA NA NA NA ## 5 NA NA 1034 701 NA NA NA NA NA NA ## 6 NA NA 1047 701 NA NA NA NA NA NA ## 7 NA NA 1057 701 NA NA NA NA NA NA ## 8 NA NA 1097 701 NA NA NA NA NA NA ## 9 NA NA 1111 701 NA NA NA NA NA NA ## 10 NA NA 1115 701 NA NA NA NA NA NA ## # … with 296 more rows, and 39 more variables: TRTSDT \u0026lt;dbl\u0026gt;, TRTEDT \u0026lt;dbl\u0026gt;, ## # TRTDURD \u0026lt;dbl\u0026gt;, AVGDD \u0026lt;dbl\u0026gt;, CUMDOSE \u0026lt;dbl\u0026gt;, AGE \u0026lt;dbl\u0026gt;, AGEGR1 \u0026lt;dbl\u0026gt;, ## # AGEGR1N \u0026lt;dbl\u0026gt;, AGEU \u0026lt;dbl\u0026gt;, RACE \u0026lt;dbl\u0026gt;, RACEN \u0026lt;dbl\u0026gt;, SEX \u0026lt;dbl\u0026gt;, ## # ETHNIC \u0026lt;dbl\u0026gt;, SAFFL \u0026lt;dbl\u0026gt;, ITTFL \u0026lt;dbl\u0026gt;, EFFFL \u0026lt;dbl\u0026gt;, COMP8FL \u0026lt;dbl\u0026gt;, ## # COMP16FL \u0026lt;dbl\u0026gt;, COMP24FL \u0026lt;dbl\u0026gt;, DISCONFL \u0026lt;dbl\u0026gt;, DSRAEFL \u0026lt;dbl\u0026gt;, DTHFL \u0026lt;dbl\u0026gt;, ## # BMIBL \u0026lt;dbl\u0026gt;, BMIBLGR1 \u0026lt;dbl\u0026gt;, HEIGHTBL \u0026lt;dbl\u0026gt;, WEIGHTBL \u0026lt;dbl\u0026gt;, EDUCLVL \u0026lt;dbl\u0026gt;, ## # DISONSDT \u0026lt;dbl\u0026gt;, DURDIS \u0026lt;dbl\u0026gt;, DURDSGR1 \u0026lt;dbl\u0026gt;, VISIT1DT \u0026lt;dbl\u0026gt;, … "
},
{
	"uri": "/output/demographic/",
	"title": "Create Demographic table",
	"tags": [],
	"description": "An example of how to generate an Demographic output based on ADaM dataset",
	"content": " Introduction This guide will show you how two pharmaverse packages, along with some from tidyverse, can be used to create a Demographic table as an end-to-end, using the {admiral} ADSL data as an input.\nThe two packages used with a brief description of their purpose are as follows:\n{rtables}: designed to create and display complex tables with R. {tern}: contains analysis functions to create tables and graphs used for clinical trial reporting. It is important to understand {rtables} grammar by reading through the above linked package site, as these are fundamental to being able to use {tern}.\nLoad Data and Required pharmaverse Packages After installation of packages, the first step is to load our pharmaverse packages and input data.\noptions(repos = c( pharmaverse = \u0026#39;https://pharmaverse.r-universe.dev\u0026#39;, CRAN = \u0026#39;https://cloud.r-project.org\u0026#39;)) library(admiral) library(rtables) library(tern) library(dplyr) # Read in input ADaM data data(\u0026quot;admiral_adsl\u0026quot;) Start preprocessing The first step we are going to encode missing entries across groups of categorical variables in a data frame adsl.\nadsl \u0026lt;- df_explicit_na(admiral_adsl) Now we will add some pre-processing.\nadsl \u0026lt;- adsl %\u0026gt;% mutate( SEX = factor(case_when( SEX == \u0026quot;M\u0026quot; ~ \u0026quot;Male\u0026quot;, SEX == \u0026quot;F\u0026quot; ~ \u0026quot;Female\u0026quot;, SEX == \u0026quot;U\u0026quot; ~ \u0026quot;Unknown\u0026quot;, SEX == \u0026quot;UNDIFFERENTIATED\u0026quot; ~ \u0026quot;Undifferentiated\u0026quot; )) ) Now optionally we create lists: vars and var_labels which hold the variables and thier corresponding labels. We will use them in the next step.\nvars \u0026lt;- c(\u0026quot;AGE\u0026quot;, \u0026quot;AGEGR1\u0026quot;, \u0026quot;SEX\u0026quot;,\u0026quot;RACE\u0026quot;) var_labels \u0026lt;- c( \u0026quot;Age (yr)\u0026quot;, \u0026quot;Age groups\u0026quot;, \u0026quot;Sex\u0026quot;, \u0026quot;Race\u0026quot; ) Now we create the demographic table using the {rtables} and {tern} packages, and using ARM as the grouping variable.\nresult \u0026lt;- basic_table() %\u0026gt;% split_cols_by(var = \u0026quot;ARM\u0026quot;) %\u0026gt;% add_colcounts() %\u0026gt;% summarize_vars( vars = vars, var_labels = var_labels ) %\u0026gt;% build_table(adsl) result ## Placebo Screen Failure Xanomeline High Dose Xanomeline Low Dose ## (N=86) (N=52) (N=84) (N=84) ## —————————————————————————————————————————————————————————————————————————————————————————————————————————————— ## Age (yr) ## n 86 52 84 84 ## Mean (SD) 75.2 (8.6) 75.1 (9.7) 74.4 (7.9) 75.7 (8.3) ## Median 76.0 76.0 76.0 77.5 ## Min - Max 52.0 - 89.0 50.0 - 89.0 56.0 - 88.0 51.0 - 88.0 ## Age groups ## n 86 52 84 84 ## \u0026lt;18 0 0 0 0 ## 18-64 14 (16.3%) 9 (17.3%) 11 (13.1%) 8 (9.5%) ## \u0026gt;=65 72 (83.7%) 43 (82.7%) 73 (86.9%) 76 (90.5%) ## Sex ## n 86 52 84 84 ## Female 53 (61.6%) 36 (69.2%) 40 (47.6%) 50 (59.5%) ## Male 33 (38.4%) 16 (30.8%) 44 (52.4%) 34 (40.5%) ## Race ## n 86 52 84 84 ## AMERICAN INDIAN OR ALASKA NATIVE 0 1 (1.9%) 1 (1.2%) 0 ## ASIAN 0 2 (3.8%) 0 0 ## BLACK OR AFRICAN AMERICAN 8 (9.3%) 6 (11.5%) 9 (10.7%) 6 (7.1%) ## WHITE 78 (90.7%) 43 (82.7%) 74 (88.1%) 78 (92.9%) "
},
{
	"uri": "/app/teal/",
	"title": "Create TEAL Shiny APP with demographic table",
	"tags": [],
	"description": "An example of how to create a Shiny APP using demographic module",
	"content": " Introduction This guide will show you how set of the pharmaverse packages can be used to create a a Shiny APP using demographic module end-to-end, using the {admiral} ADSL data as an input.\nThe eight packages used with a brief description of their purpose are as follows:\n{teal.widgets: provides various widgets for teal applications. {teal.logger: provides a unified setup for generating logs using the logger package. {teal.code: provides tools to store code and an execution environment associated with it. {teal.data: creates the data needed for teal applications. {teal.slice: used in the development of teal shiny modules {teal.transform: contains functions and shiny modules for extracting and merging data within the teal framework. {teal: is a shiny-based interactive exploration framework for analyzing data {teal.modules.clinical: contains a set of standard teal modules to be used with CDISC data in order to generate many of the standard outputs used in clinical trials In this exmaple it is important to understand {teal.modules.clinical in order to modify parameters to the teal module: tm_t_summary.\nLoad Data and Required pharmaverse Packages After installation of packages, the first step is to load our pharmaverse packages and input data.\noptions(repos = c( pharmaverse = \u0026#39;https://pharmaverse.r-universe.dev\u0026#39;, CRAN = \u0026#39;https://cloud.r-project.org\u0026#39;)) library(admiral) library(rtables) library(tern) library(teal.widgets) library(teal.logger) library(teal.code) library(teal.data) library(teal.slice) library(teal.transform) library(teal) library(teal.modules.clinical) library(dplyr) # Read in input ADaM data data(\u0026quot;admiral_adsl\u0026quot;) Start preprocessing In the first step we are going to encode missing entries across groups of categorical variables in a data frame adsl.\nADSL \u0026lt;- df_explicit_na(admiral_adsl) Now we will add some pre-processing.\nADSL \u0026lt;- ADSL %\u0026gt;% mutate( SEX = factor(case_when( SEX == \u0026quot;M\u0026quot; ~ \u0026quot;Male\u0026quot;, SEX == \u0026quot;F\u0026quot; ~ \u0026quot;Female\u0026quot;, SEX == \u0026quot;U\u0026quot; ~ \u0026quot;Unknown\u0026quot;, SEX == \u0026quot;UNDIFFERENTIATED\u0026quot; ~ \u0026quot;Undifferentiated\u0026quot; )) ) Now we create the Shiny APP based on the module: tm_t_summary. Please note that the above two pre-processing steps are included in the code section below to allow reproducibility of the code.\napp \u0026lt;- init( data = cdisc_data( cdisc_dataset(\u0026quot;ADSL\u0026quot;, ADSL), code = \u0026#39;data(\u0026quot;admiral_adsl\u0026quot;) ADSL \u0026lt;- df_explicit_na(admiral_adsl) ADSL \u0026lt;- ADSL %\u0026gt;% mutate( SEX = factor(case_when( SEX == \u0026quot;M\u0026quot; ~ \u0026quot;Male\u0026quot;, SEX == \u0026quot;F\u0026quot; ~ \u0026quot;Female\u0026quot;, SEX == \u0026quot;U\u0026quot; ~ \u0026quot;Unknown\u0026quot;, SEX == \u0026quot;UNDIFFERENTIATED\u0026quot; ~ \u0026quot;Undifferentiated\u0026quot; )) ) \u0026#39;, check = TRUE ), modules = modules( tm_t_summary( label = \u0026quot;Demographic Table\u0026quot;, dataname = \u0026quot;ADSL\u0026quot;, arm_var = choices_selected(c(\u0026quot;ARM\u0026quot;, \u0026quot;ARMCD\u0026quot;), \u0026quot;ARM\u0026quot;), summarize_vars = choices_selected( c(\u0026quot;SEX\u0026quot;, \u0026quot;RACE\u0026quot;, \u0026quot;AGEGR1\u0026quot;), c(\u0026quot;SEX\u0026quot;, \u0026quot;RACE\u0026quot;) ), useNA = \u0026quot;ifany\u0026quot; ) ) ) ## [INFO] 2022-08-25 09:34:29.7263 pid:6198 token:[] teal.modules.clinical Initializing tm_t_summary Now we run the shiny APP. Please note that parameter option is only used to control rendering of the Shiny APP.\nshinyApp(app$ui, app$server, options = list(width = 1200, height= 600)) While this code won’t work, as this website is static - you can see an example here: https://genentech.shinyapps.io/teal_efficacy/\n"
},
{
	"uri": "/",
	"title": "Pharmaverse Examples",
	"tags": [],
	"description": "",
	"content": "pharmaverse examples The true beauty of pharmaverse (and open source in general) is when efforts from various different developers come together to compliment each other as a whole greater than the sum of the individual parts.\nHere, we try to exemplify this by sharing end-to-end examples that show how various pharmaverse packages can be combined to achieve common clinical reporting needs, such as SDTM, ADaM and Tables/Listings/Graphs. Our earliest examples focus on ADaM, but over time we\u0026rsquo;ll endeavour to add further examples.\nData STDM, ADaM and other data products\nCreate ADSL An example of how to generate an ADSL dataset from STDM\nTLGs Output and other products\nCreate Demographic table An example of how to generate an Demographic output based on ADaM dataset\nIDDs/Apps Shiny APP\nCreate TEAL Shiny APP with demographic table An example of how to create a Shiny APP using demographic module\n"
},
{
	"uri": "/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]